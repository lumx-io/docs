openapi: 3.1.0
info:
  version: 1.0.0
  title: Lumx API
  description: A cross-border banking API with instant settlements and unmatched liquidity, powered by stablecoins.
servers:
  - url: https://api-sandbox.lumx.io
  # - url: https://api.stg.lumx.cloud
  # - url: https://api.lumx.io
paths:
  /customers:
    post:
      summary: Create a customer
      description: This endpoint creates a customer. At least one document is required.
      tags:
        - Customers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCreateRequest'
      responses:
        '201':
          description: Successfully created the customer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid request parameters
        '409':
          description: A conflict error ocurred trying to create a customer
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Another customer with the same document already exists
                  customer:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: 3d830599-f834-43c9-93f1-3ff6cf84798c
      security:
        - apiKey: []
    get:
      tags:
        - Customers
      summary: Read all customers
      description: This endpoint reads all customers.
      # parameters:
      #   - in: query
      #     name: cursor
      #     schema:
      #       type: string
      #     required: false
      #     description: The cursor for pagination.
      #   - in: query
      #     name: size
      #     schema:
      #       type: integer
      #     required: false
      #     description: The number of customers to return.
      responses:
        '200':
          description: The list of customers was retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    description: An array containing all customers.
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
                  # pagination:
                  #   type: object
                  #   properties:
                  #     cursor:
                  #       type: string
                  #     pageSize:
                  #       type: number
      security:
        - apiKey: []
  '/customers/{id}':
    get:
      tags:
        - Customers
      summary: Read a customer
      description: This endpoint reads a customer's details.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the customer.
      responses:
        '200':
          description: Customer details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found!.
      security:
        - apiKey: []
    patch:
      tags:
        - Customers
      summary: Update a customer
      description: Updates a customer's details and documents. All fields are optional and documents will be added or updated if provided.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the customer.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUpdateRequest'
      responses:
        '200':
          description: Customer updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid request parameters.
        '404':
          description: Customer not found!
        '409':
          description: An error ocurred trying to create a customer
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Another customer with the same document already exists
                  customer:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: 3d830599-f834-43c9-93f1-3ff6cf84798c
      security:
        - apiKey: []
  /exchange-rate:
    get:
      tags:
        - Exchange Rates
      summary: Get an exchange rate
      description: Get the current exchange rate between two currencies.
      parameters:
        - name: sourceCurrency
          in: query
          required: true
          schema:
            type: string
            enum: [BRL, USDC, USDT]
          description: The currency to convert from.
        - name: targetCurrency
          in: query
          required: true
          schema:
            type: string
            enum: [BRL, USDC, USDT]
          description: The currency to convert to.
      responses:
        '200':
          description: Exchange rate quote returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeRateResponse'
      security:
        - apiKey: []
  /transactions/on-ramp:
    post:
      tags:
        - Transactions
      summary: On-ramp
      description: >-
        Convert from fiat to stablecoin.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CustomerId'
                - $ref: '#/components/schemas/CrossRampRequest'
                - $ref: '#/components/schemas/OnRampRequest'
      responses:
        '201':
          description: On-ramp operation created successfully.
          content:
            application/json:
              examples:
                success:
                  summary: Successful on-ramp
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    customerId: "123e4567-e89b-12d3-a456-426614174001"
                    type: "on_ramp"
                    request:
                      sourceCurrency: "BRL"
                      targetCurrency: "USDC"
                      amount: "6000.00"
                      payment:
                        rail: "pix"
                    state:
                      status: "success"
                      payment:
                        rail: "pix"
                        brCode: "00020126580014br.gov.bcb.pix0136123e4567-e89b-12d3-a456-4266141740005204000053039865802BR5915Test Merchant6009Sao Paulo62070503***63041234"
                      receipt:
                        rate: "0.166"
                        sourceAmount: "6000.00"
                        targetAmount: "986.80"
                        sourceCurrency: "BRL"
                        targetCurrency: "USDC"
                        fees:
                          currency: "USDC"
                          lumx:
                            percentage: "9.988916"
                            flat: "1"
                          developer:
                            percentage: "0.998891"
                            flat: "0.1"
                        blockchain:
                          transactionHash: "0x0bf375d559848032092823fc6b821cc72426b890e91ab1a5d2acc7183c325832"
                          blockExplorerUrl: "https://polygonscan.com/"
                    createdAt: "2024-03-20T15:30:00Z"
                    updatedAt: "2024-03-20T15:30:10Z"
                awaiting_funds:
                  summary: Awaiting funds
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    customerId: "123e4567-e89b-12d3-a456-426614174001"
                    type: "on_ramp"
                    request:
                      sourceCurrency: "BRL"
                      targetCurrency: "USDC"
                      amount: "100.00"
                      payment:
                        rail: "pix"
                    state:
                      status: "awaiting_funds"
                      payment:
                        rail: "pix"
                        brCode: "00020126580014br.gov.bcb.pix0136123e4567-e89b-12d3-a456-4266141740005204000053039865802BR5915Test Merchant6009Sao Paulo62070503***63041234"
                    createdAt: "2024-03-20T15:30:00Z"
                    updatedAt: "2024-03-20T15:30:00Z"
                processing:
                  summary: Processing
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    customerId: "123e4567-e89b-12d3-a456-426614174001"
                    type: "on_ramp"
                    request:
                      sourceCurrency: "BRL"
                      targetCurrency: "USDC"
                      amount: "6000.00"
                      payment:
                        rail: "pix"
                    state:
                      status: "processing"
                      payment:
                        rail: "pix"
                        brCode: "00020126580014br.gov.bcb.pix0136123e4567-e89b-12d3-a456-4266141740005204000053039865802BR5915Test Merchant6009Sao Paulo62070503***63041234"
                    createdAt: "2024-03-20T15:30:00Z"
                    updatedAt: "2024-03-20T15:30:05Z"
                failed:
                  summary: Failed
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    customerId: "123e4567-e89b-12d3-a456-426614174001"
                    type: "on_ramp"
                    request:
                      sourceCurrency: "BRL"
                      targetCurrency: "USDC"
                      amount: "6000.00"
                      payment:
                        rail: "pix"
                    state:
                      status: "failed"
                      payment:
                        rail: "pix"
                        brCode: "00020126580014br.gov.bcb.pix0136123e4567-e89b-12d3-a456-4266141740005204000053039865802BR5915Test Merchant6009Sao Paulo62070503***63041234"
                      error:
                        code: "INSUFFICIENT_FUNDS"
                        message: "The payment was rejected due to insufficient funds"
                    createdAt: "2024-03-20T15:30:00Z"
                    updatedAt: "2024-03-20T15:30:15Z"
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseTransactionResponse'
                  - $ref: '#/components/schemas/OnRampResponse'
                  - $ref: '#/components/schemas/TransactionTimestamps'
      security:
        - apiKey: []
  /transactions/off-ramp:
    post:
      tags:
        - Transactions
      summary: Off-ramp
      description: >-
        Convert from stablecoin to fiat.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CustomerId'
                - $ref: '#/components/schemas/CrossRampRequest'
                - $ref: '#/components/schemas/OffRampRequest'
      responses:
        '201':
          description: Off-ramp operation created successfully.
          content:
            application/json:
              examples:
                success:
                  summary: Successful off-ramp
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174002"
                    customerId: "123e4567-e89b-12d3-a456-426614174001"
                    type: "off_ramp"
                    request:
                      sourceCurrency: "USDC"
                      targetCurrency: "BRL"
                      amount: "1000.00"
                      payment:
                        rail: "pix"
                        keyValue: "user@email.com"
                        keyType: "email"
                    state:
                      status: "success"
                      payment:
                        rail: "pix"
                      receipt:
                        rate: "6.0066"
                        sourceAmount: "1000.00"
                        targetAmount: "5925.55"
                        sourceCurrency: "USDC"
                        targetCurrency: "BRL"
                        fees:
                          currency: "USDC"
                          lumx:
                            percentage: "10.000000"
                            flat: "1"
                          developer:
                            percentage: "1.000000"
                            flat: "0.1"
                        blockchain:
                          transactionHash: "0x0bf375d559848032092823fc6b821cc72426b890e91ab1a5d2acc7183c325832"
                          blockExplorerUrl: "https://polygonscan.com/"
                    createdAt: "2024-03-20T15:30:00Z"
                    updatedAt: "2024-03-20T15:30:10Z"
                processing:
                    summary: Processing
                    value:
                      id: "123e4567-e89b-12d3-a456-426614174002"
                      customerId: "123e4567-e89b-12d3-a456-426614174001"
                      type: "off_ramp"
                      request:
                        sourceCurrency: "USDC"
                        targetCurrency: "BRL"
                        amount: "100.00"
                        payment:
                          rail: "pix"
                          keyValue: "user@email.com"
                          keyType: "email"
                      state:
                        status: "processing"
                        payment:
                          rail: "pix"
                      createdAt: "2024-03-20T15:30:00Z"
                      updatedAt: "2024-03-20T15:30:05Z"
                awaiting_funds:
                  summary: Awaiting funds
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174002"
                    customerId: "123e4567-e89b-12d3-a456-426614174001"
                    type: "off_ramp"
                    request:
                      sourceCurrency: "USDC"
                      targetCurrency: "BRL"
                      amount: "100.00"
                      payment:
                        rail: "pix"
                        keyValue: "user@email.com"
                        keyType: "email"
                    state:
                      status: "awaiting_funds"
                      payment:
                        rail: "pix"
                    createdAt: "2024-03-20T15:30:00Z"
                    updatedAt: "2024-03-20T15:30:00Z"
                failed:
                  summary: Failed
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174002"
                    customerId: "123e4567-e89b-12d3-a456-426614174001"
                    type: "off_ramp"
                    request:
                      sourceCurrency: "USDC"
                      targetCurrency: "BRL"
                      amount: "100.00"
                      payment:
                        rail: "pix"
                        keyValue: "user@email.com"
                        keyType: "email"
                    state:
                      status: "failed"
                      payment:
                        rail: "pix"
                      error:
                        code: "INVALID_PIX_KEY"
                        message: "The provided PIX key is invalid or not found"
                    createdAt: "2024-03-20T15:30:00Z"
                    updatedAt: "2024-03-20T15:30:15Z"
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseTransactionResponse'
                  - $ref: '#/components/schemas/OffRampResponse'
                  - $ref: '#/components/schemas/TransactionTimestamps'
      security:
        - apiKey: []
  /transactions/transfers:
    post:
      tags:
        - Transactions
      summary: Transfer
      description: >-
        Transfer stablecoins between customers or to an external crypto wallet.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
      responses:
        '201':
          description: Transfer transaction created successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseTransactionResponse'
                  # - $ref: "#/components/schemas/TransferResponse"
                  - $ref: '#/components/schemas/TransactionTimestamps'
      security:
        - apiKey: []
  # "/transactions/{transactionId}/execute":
  #   post:
  #     tags:
  #       - Transactions
  #     summary: Execute a transaction
  #     description: "Execute a transaction that you previously signed using your signing provider. Important: This is an ASYNC route! Use the read transaction route to check the transaction's status."
  #     parameters:
  #       - name: transactionId
  #         in: path
  #         description: The ID of the transaction.
  #         required: true
  #         schema:
  #           type: string
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/ExecuteTransactionRequest"
  #             required:
  #               - signedTransaction
  #     responses:
  #       "202":
  #         description: The transaction was validated and will be submitted to the blockchain.
  #         content:
  #           application/json:
  #             schema:
  #               oneOf:
  #                 - type: object
  #                   title: Off-ramp
  #                   allOf:
  #                     - $ref: "#/components/schemas/BaseTransactionResponse"
  #                     - $ref: "#/components/schemas/OffRampResponse"
  #                     - $ref: "#/components/schemas/TransactionTimestamps"
  #                     - type: object
  #                       properties:
  #                         status:
  #                           enum: ['processing']
  #                 - type: object
  #                   title: Transfer
  #                   allOf:
  #                     - $ref: "#/components/schemas/BaseTransactionResponse"
  #                     - $ref: "#/components/schemas/TransferResponse"
  #                     - $ref: "#/components/schemas/TransactionTimestamps"
  #                     - type: object
  #                       properties:
  #                         status:
  #                           enum: ['processing']
  #     security:
  #       - apiKey: []
  '/transactions/{transactionId}':
    get:
      tags:
        - Transactions
      summary: Read a transaction
      description: This endpoint reads a transaction made with your API key.
      parameters:
        - name: transactionId
          in: path
          description: The ID of the transaction.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The details of the transaction were retrieved successfully.
          content:
            application/json:
              examples:
                "off-ramp: processing":
                    summary: Processing
                    value:
                      id: "123e4567-e89b-12d3-a456-426614174002"
                      customerId: "123e4567-e89b-12d3-a456-426614174001"
                      type: "off_ramp"
                      request:
                        sourceCurrency: "USDC"
                        targetCurrency: "BRL"
                        amount: "100.00"
                        payment:
                          rail: "pix"
                          keyValue: "user@email.com"
                          keyType: "email"
                      state:
                        status: "processing"
                        payment:
                          rail: "pix"
                      createdAt: "2024-03-20T15:30:00Z"
                      updatedAt: "2024-03-20T15:30:05Z"
                "off-ramp: success":
                  summary: Successful off-ramp
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174002"
                    customerId: "123e4567-e89b-12d3-a456-426614174001"
                    type: "off_ramp"
                    request:
                      sourceCurrency: "USDC"
                      targetCurrency: "BRL"
                      amount: "1000.00"
                      payment:
                        rail: "pix"
                        keyValue: "user@email.com"
                        keyType: "email"
                    state:
                      status: "success"
                      payment:
                        rail: "pix"
                      receipt:
                        rate: "6.0066"
                        sourceAmount: "1000.00"
                        targetAmount: "5925.55"
                        sourceCurrency: "USDC"
                        targetCurrency: "BRL"
                        fees:
                          currency: "USDC"
                          lumx:
                            percentage: "10.000000"
                            flat: "1"
                          developer:
                            percentage: "1.000000"
                            flat: "0.1"
                        blockchain:
                          transactionHash: "0x0bf375d559848032092823fc6b821cc72426b890e91ab1a5d2acc7183c325832"
                          blockExplorerUrl: "https://polygonscan.com/"
                    createdAt: "2024-03-20T15:30:00Z"
                    updatedAt: "2024-03-20T15:30:10Z"
                # "off-ramp: awaiting_funds":
                #   summary: Awaiting funds
                #   value:
                #     id: "123e4567-e89b-12d3-a456-426614174002"
                #     customerId: "123e4567-e89b-12d3-a456-426614174001"
                #     type: "off_ramp"
                #     request:
                #       sourceCurrency: "USDC"
                #       targetCurrency: "BRL"
                #       amount: "100.00"
                #       payment:
                #         rail: "pix"
                #         keyValue: "user@email.com"
                #         keyType: "email"
                #     state:
                #       status: "awaiting_funds"
                #       payment:
                #         rail: "pix"
                #     createdAt: "2024-03-20T15:30:00Z"
                #     updatedAt: "2024-03-20T15:30:00Z"
                "off-ramp: failed":
                  summary: Failed
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174002"
                    customerId: "123e4567-e89b-12d3-a456-426614174001"
                    type: "off_ramp"
                    request:
                      sourceCurrency: "USDC"
                      targetCurrency: "BRL"
                      amount: "100.00"
                      payment:
                        rail: "pix"
                        keyValue: "user@email.com"
                        keyType: "email"
                    state:
                      status: "failed"
                      payment:
                        rail: "pix"
                      error:
                        code: "INVALID_PIX_KEY"
                        message: "The provided PIX key is invalid or not found"
                    createdAt: "2024-03-20T15:30:00Z"
                    updatedAt: "2024-03-20T15:30:15Z"
                "on-ramp: awaiting_funds":
                  summary: Awaiting funds
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    customerId: "123e4567-e89b-12d3-a456-426614174001"
                    type: "on_ramp"
                    request:
                      sourceCurrency: "BRL"
                      targetCurrency: "USDC"
                      amount: "100.00"
                      payment:
                        rail: "pix"
                    state:
                      status: "awaiting_funds"
                      payment:
                        rail: "pix"
                        brCode: "00020126580014br.gov.bcb.pix0136123e4567-e89b-12d3-a456-4266141740005204000053039865802BR5915Test Merchant6009Sao Paulo62070503***63041234"
                    createdAt: "2024-03-20T15:30:00Z"
                    updatedAt: "2024-03-20T15:30:00Z"
                "on-ramp: processing":
                  summary: Processing
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    customerId: "123e4567-e89b-12d3-a456-426614174001"
                    type: "on_ramp"
                    request:
                      sourceCurrency: "BRL"
                      targetCurrency: "USDC"
                      amount: "6000.00"
                      payment:
                        rail: "pix"
                    state:
                      status: "processing"
                      payment:
                        rail: "pix"
                        brCode: "00020126580014br.gov.bcb.pix0136123e4567-e89b-12d3-a456-4266141740005204000053039865802BR5915Test Merchant6009Sao Paulo62070503***63041234"
                    createdAt: "2024-03-20T15:30:00Z"
                    updatedAt: "2024-03-20T15:30:05Z"
                "on-ramp: success":
                  summary: Successful on-ramp
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    customerId: "123e4567-e89b-12d3-a456-426614174001"
                    type: "on_ramp"
                    request:
                      sourceCurrency: "BRL"
                      targetCurrency: "USDC"
                      amount: "6000.00"
                      payment:
                        rail: "pix"
                    state:
                      status: "success"
                      payment:
                        rail: "pix"
                        brCode: "00020126580014br.gov.bcb.pix0136123e4567-e89b-12d3-a456-4266141740005204000053039865802BR5915Test Merchant6009Sao Paulo62070503***63041234"
                      receipt:
                        rate: "0.166"
                        sourceAmount: "6000.00"
                        targetAmount: "986.80"
                        sourceCurrency: "BRL"
                        targetCurrency: "USDC"
                        fees:
                          currency: "USDC"
                          lumx:
                            percentage: "9.988916"
                            flat: "1"
                          developer:
                            percentage: "0.998891"
                            flat: "0.1"
                        blockchain:
                          transactionHash: "0x0bf375d559848032092823fc6b821cc72426b890e91ab1a5d2acc7183c325832"
                          blockExplorerUrl: "https://polygonscan.com/"
                    createdAt: "2024-03-20T15:30:00Z"
                    updatedAt: "2024-03-20T15:30:10Z"
                "on-ramp: failed":
                  summary: Failed
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    customerId: "123e4567-e89b-12d3-a456-426614174001"
                    type: "on_ramp"
                    request:
                      sourceCurrency: "BRL"
                      targetCurrency: "USDC"
                      amount: "6000.00"
                      payment:
                        rail: "pix"
                    state:
                      status: "failed"
                      payment:
                        rail: "pix"
                        brCode: "00020126580014br.gov.bcb.pix0136123e4567-e89b-12d3-a456-4266141740005204000053039865802BR5915Test Merchant6009Sao Paulo62070503***63041234"
                      error:
                        code: "INSUFFICIENT_FUNDS"
                        message: "The payment was rejected due to insufficient funds"
                    createdAt: "2024-03-20T15:30:00Z"
                    updatedAt: "2024-03-20T15:30:15Z"
              schema:
                oneOf:
                  - type: object
                    title: On-ramp
                    allOf:
                      - $ref: '#/components/schemas/BaseTransactionResponse'
                      - $ref: '#/components/schemas/OnRampResponse'
                      - $ref: '#/components/schemas/TransactionTimestamps'
                  - type: object
                    title: Off-ramp
                    allOf:
                      - $ref: '#/components/schemas/BaseTransactionResponse'
                      - $ref: '#/components/schemas/OffRampResponse'
                      - $ref: '#/components/schemas/TransactionTimestamps'
                  - type: object
                    title: Transfer
                    allOf:
                      - $ref: '#/components/schemas/BaseTransactionResponse'
                      # - $ref: "#/components/schemas/TransferResponse"
                      - $ref: '#/components/schemas/TransactionTimestamps'
      security:
        - apiKey: []
  
  /transactions:
    get:
      tags:
        - Transactions
      summary: Read all transactions
      description: This endpoint reads all transactions made with your API key.
      # parameters:
      #   - in: query
      #     name: cursor
      #     schema:
      #       type: string
      #     required: false
      #     description: The cursor for pagination.
      #   - in: query
      #     name: size
      #     schema:
      #       type: integer
      #     required: false
      #     description: The number of transactions to return.
      #   - in: query
      #     name: startDate
      #     schema:
      #       type: string
      #       format: date-time
      #     required: false
      #     description: The start date and time for filtering the results.
      #   - in: query
      #     name: endDate
      #     schema:
      #       type: string
      #       format: date-time
      #     required: false
      #     description: The end date and time for filtering the results.
      #   - in: query
      #     name: type
      #     schema:
      #       type: string
      #       enum:
      #         - mint
      #         - transfer
      #         - custom
      #     required: false
      #     description: The type of the transaction.
      #   - in: query
      #     name: status
      #     schema:
      #       type: string
      #       enum:
      #         - success
      #         - failed
      #         - created
      #     required: false
      #     description: The status of the transaction.
      #   - in: query
      #     name: contractId
      #     schema:
      #       type: string
      #     description: The id of the contract.
      responses:
        '200':
          description: The list of transactions was retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: An array containing all transactions made by wallets of this project.
                    items:
                      oneOf:
                        - type: object
                          title: On-ramps
                          allOf:
                            - $ref: '#/components/schemas/BaseTransactionResponse'
                            - $ref: '#/components/schemas/OnRampResponse'
                            - $ref: '#/components/schemas/TransactionTimestamps'
                        - type: object
                          title: Off-ramps
                          allOf:
                            - $ref: '#/components/schemas/BaseTransactionResponse'
                            - $ref: '#/components/schemas/OffRampResponse'
                            - $ref: '#/components/schemas/TransactionTimestamps'
                        - type: object
                          title: Transfers
                          allOf:
                            - $ref: '#/components/schemas/BaseTransactionResponse'
                            # - $ref: "#/components/schemas/TransferResponse"
                            - $ref: '#/components/schemas/TransactionTimestamps'
                  # pagination:
                  #   type: object
                  #   properties:
                  #     cursor:
                  #       type: string
                  #       description: The cursor for the next page.
                  #     pageSize:
                  #       type: number
                  #       description: The size of the page.
      security:
        - apiKey: []

components:
  schemas:
    ProjectRequest:
      type: object
      properties:
        name:
          description: The name of the project.
          type: string
        blockchainName:
          description: The blockchain used by the project. More blockchains coming soon.
          type: string
          enum: ['Polygon']
    ProjectResponse:
      type: object
      properties:
        id:
          description: The id of the project.
          type: string
          format: uuid
        name:
          description: The name of the project.
          type: string
        blockchain:
          type: object
          description: Details of the blockchain used by the project.
          properties:
            name:
              type: string
              example: 'Polygon'
              description: The name of the blockchain.
            decimalChainId:
              type: number
              description: The decimal chain ID of the blockchain.
        createdAt:
          type: string
          format: date-time
          description: The timestamp from when the project was created.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp from when the project was last updated.
        apiKey:
          description: The API key associated with the project.
          type: string
    CustomerCreateRequest:
      allOf:
        - oneOf:
            - allOf:
                - $ref: '#/components/schemas/CustomerIndividual'
                  description: Individual customer
                  title: Individual
                - type: object
                  required:
                    - name
                    - birthdate
            - allOf:
                - $ref: '#/components/schemas/CustomerBusiness'
                  description: Business customer
                  title: Business
                - type: object
                  required:
                    - legalName
                    - incorporationDate
          discriminator:
            propertyName: type
            mapping:
              individual: '#/components/schemas/CustomerIndividual'
              business: '#/components/schemas/CustomerBusiness'
        - $ref: '#/components/schemas/CustomerCreateRulesRequest'
    CustomerUpdateRequest:
      allOf:
        - oneOf:
            - $ref: '#/components/schemas/CustomerIndividual'
              description: Individual customer
              title: Individual
            - $ref: '#/components/schemas/CustomerBusiness'
              description: Business customer
              title: Business
          discriminator:
            propertyName: type
            mapping:
              individual: '#/components/schemas/CustomerIndividual'
              business: '#/components/schemas/CustomerBusiness'
        - $ref: '#/components/schemas/CustomerUpdateRulesRequest'
    CustomerCreateRulesRequest:
      type: object
      required:
        - type
        - documents
        - address
      properties:
        address:
          type: object
          required:
            - line1
            - country
            - state
            - city
            - zipCode
    CustomerUpdateRulesRequest:
      type: object
      minProperties: 2
      required:
        - type
    CustomerBase:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          description: Unique customer identifier
          format: uuid
          readOnly: true
        type:
          type: string
          description: The type of this customer.
          enum: ['individual', 'business']
        passkeyPublicKey:
          type: string
          description: Customer's passkey public key
        address:
          $ref: '#/components/schemas/CustomerAddress'
          example:
            line1: 'Rua dos Bobos, 0'
            line2: 'Apto 101'
            country: 'BRA'
            state: 'SP'
            city: 'São Paulo'
            zipCode: '01234-567'
        documents:
          type: array
          description: List of customer documents
          items:
            $ref: '#/components/schemas/CustomerDocument'
          example:
            - country: BRA
              type: TAX_ID
              value: 123.456.789-00
        createdAt:
          type: string
          description: Record creation timestamp
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          description: Record last update timestamp
          format: date-time
          readOnly: true
    CustomerAddress:
      type: object
      additionalProperties: false
      properties:
        line1:
          type: string
          description: The first line of the address
          example: 'Rua dos Bobos, 0'
        line2:
          type: string
          description: The second line of the address
          example: 'Apto 101'
        country:
          type: string
          description: The country code where the customer is located following ISO 3166-1 alpha-2 (BRA is the only one accepted at the moment)
          enum: [BRA]
          example: 'BRA'
        state:
          type: string
          description: The state where the customer is located
          example: 'SP'
        city:
          type: string
          description: The city where the customer is located
          example: 'São Paulo'
        zipCode:
          type: string
          description: The postal code where the customer is located
          example: '01234-567'
    CustomerDocument:
      type: object
      required:
        - country
        - type
        - value
      additionalProperties: false
      properties:
        country:
          type: string
          description: The country code that issued the document following ISO 3166-1 alpha-2 (BRA is the only one accepted at the moment)
          enum: [BRA]
        type:
          type: string
          description: The type of document (TAX_ID is the only one accepted at the moment)
          enum: [TAX_ID]
        value:
          type: string
          description: The document value/number.
          example: 123.456.789-00
    CustomerIndividual:
      type: object
      allOf:
        - $ref: '#/components/schemas/CustomerBase'
        - type: object
          properties:
            type:
              enum: ['individual']
            name:
              type: string
              description: Customer full name
            birthdate:
              type: string
              description: Customer birth date
              format: date
              example: '1990-01-01'
    CustomerBusiness:
      type: object
      allOf:
        - $ref: '#/components/schemas/CustomerBase'
        - type: object
          properties:
            type:
              enum: ['business']
            legalName:
              type: string
              description: Customer legal name
            incorporationDate:
              type: string
              description: Customer incorporation date
              format: date
              example: '2020-01-01'
    Customer:
      oneOf:
        - $ref: '#/components/schemas/CustomerIndividual'
          title: Individual
        - $ref: '#/components/schemas/CustomerBusiness'
          title: Business
      discriminator:
        propertyName: type
        mapping:
          individual: '#/components/schemas/CustomerIndividual'
          business: '#/components/schemas/CustomerBusiness'
    ExchangeRateResponse:
      type: object
      properties:
        sourceCurrency:
          type: string
          enum: [USDC, USDT, BRL]
          description: The currency to convert from.
        targetCurrency:
          type: string
          enum: [BRL, USDC, USDT]
          description: The currency to convert to.
        rate:
          type: number
          format: double
          example: 6.15
          description: The exchange rate between source and target currencies.
    CustomerId:
      type: object
      required:
        - customerId
      properties:
        customerId:
          type: string
          format: uuid
          description: The customer performing the operation.
    CrossRampRequest:
      type: object
      required:
        - customerId
        - payment
        - amount
        - sourceCurrency
        - targetCurrency
      properties:
        sourceCurrency:
          type: string
        targetCurrency:
          type: string
        amount:
          type: string
          format: number
    BaseTransactionResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The id of the transaction.
        customerId:
          type: string
          format: uuid
          description: The customer performing the operation.
        type:
          type: string
          description: The type of this transaction
          enum: ['on_ramp', 'off_ramp', 'transfer', 'swap']
        request:
          type: object
          description: The parameters used when creating this transaction.
        state:
          type: object
          description: The transaction's results.
    TransactionTimestamps:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          description: The timestamp from when the transaction was submitted.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp from when the transaction was last updated.
    BlockchainReceipt:
          type: object
          description: Blockchains information regarding this transaction
          properties:
            transactionHash:
                type: string
                description: Transaction hash recorded on the blockchain
                example: '0x0bf375d559848032092823fc6b821cc72426b890e91ab1a5d2acc7183c325832'
            blockExplorerUrl:
                type: string
                description: Block explorer from the chain
                example: 'https://polygonscan.com/'
    OnRampRequest:
      type: object
      properties:
        payment:
          type: object
          required:
            - rail
          properties:
            rail:
              type: string
              enum: ['pix']
              description: The payment rail that will be used for this transaction.
        sourceCurrency:
          enum: [BRL]
          description: The fiat currency to convert from.
        targetCurrency:
          enum: [USDC, USDT]
          description: The stablecoin to convert to.
        amount:
          example: '100.99'
          description: The amount to be converted from fiat to stablecoin.
    OnRampResponse:
      type: object
      properties:
        type:
          enum: ['on_ramp']
        status:
          enum:
            - awaiting_funds
            - processing
            - success
            - failed
        request:
          description: An object containing the parameters used for this on-ramp.
          allOf:
            - $ref: '#/components/schemas/CrossRampRequest'
            - $ref: '#/components/schemas/OnRampRequest'
        state:
          oneOf:
            - allOf:
                - $ref: '#/components/schemas/OngoingOnRampTransactionState'
            - allOf:
                - $ref: '#/components/schemas/FinishedOnRampTransactionState'
                - $ref: '#/components/schemas/SuccessOnRampTransactionState'
            - allOf:
                - $ref: '#/components/schemas/FinishedOnRampTransactionState'
                - $ref: '#/components/schemas/FailedOnRampTransactionState'
    OngoingOnRampTransactionState:
      type: object
      title: On ramp processing
      properties:
        status:
          enum:
            - awaiting_funds
            - processing
        payment:
          $ref: '#/components/schemas/OnRampStatePayment'
          description: The payment details to add funds for this on ramp transaction.
    FinishedOnRampTransactionState:
      type: object
      properties:
        status:
          enum:
            - success
            - failed
        payment:
          $ref: '#/components/schemas/OnRampStatePayment'
          description: The payment details to add funds for this on ramp transaction.
    SuccessOnRampTransactionState:
      type: object
      title: On ramp success
      properties:
        receipt:
          $ref: '#/components/schemas/OnRampSuccessReceipt'
          description: The receipt details for this transaction.
    FailedOnRampTransactionState:
      type: object
      title: On ramp failure
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Code number
            message:
              type: string
              description: Error message
    OffRampRequest:
      type: object
      required:
        - sourceCurrency
        - targetCurrency
        - amount
        - payment
      properties:
        payment:
          description: The definition of how and where the funds from the off ramp transaction will be sent.
          type: object
          required:
            - rail
          properties:
            rail:
              type: string
              enum: ['pix']
              description: The payment rail that will be used for this transaction.
            keyValue:
              type: string
              description: The PIX key identifying the account where to send funds.
            keyType:
              type: string
              enum: ['phone', 'CPF/CNPJ', 'email', 'random']
        sourceCurrency:
          enum: [USDC, USDT]
          description: The stablecoin to convert from.
        targetCurrency:
          enum: [BRL]
          description: The fiat currency to convert to.
        amount:
          example: '100.123456'
          description: The amount to be converted from stablecoin to fiat.
    OffRampResponse:
      type: object
      properties:
        type:
          enum: ['off_ramp']
        request:
          description: An object containing the parameters used for this off-ramp.
          allOf:
            - $ref: '#/components/schemas/CrossRampRequest'
            - $ref: '#/components/schemas/OffRampRequest'
        state:
          oneOf:
            - allOf:
              - $ref: '#/components/schemas/OngoingOffRampTransactionState'
            - allOf:
                - $ref: '#/components/schemas/FinishedOffRampTransactionState'
                - $ref: '#/components/schemas/SuccessOffRampTransactionState'
            - allOf:
                - $ref: '#/components/schemas/FinishedOffRampTransactionState'
                - $ref: '#/components/schemas/FailedOffRampTransactionState'
    OngoingOffRampTransactionState:
      type: object
      title: Off ramp processing
      properties:
        status:
          enum:
            - awaiting_funds
            - processing
        payment:
          $ref: '#/components/schemas/StatePayment'
          description: The payment details for this off ramp transaction.
    SuccessOffRampTransactionState:
      type: object
      title: Off ramp success
      properties:
        receipt:
          $ref: '#/components/schemas/OffRampSuccessReceipt'
          description: The receipt details for this transaction.
    FinishedOffRampTransactionState:
      type: object
      properties:
        status:
          enum:
            - success
            - failed
        payment:
          $ref: '#/components/schemas/StatePayment'
          description: The payment details for this off ramp transaction.
    FailedOffRampTransactionState:
      type: object
      title: Off ramp failure
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Code number
            message:
              type: string
              description: Error message
    TransferRequest:
      type: object
      required:
        - currency
        - from
        - to
        - amount
      properties:
        currency:
          type: string
          enum: ['USDC', 'USDT']
          description: The stablecoin to be transferred.
        from:
          type: string
          format: uuid
          description: The id of the customer who is sending the tokens.
        to:
          type: string
          description: The wallet address or customer ID who will receive the tokens.
          examples:
            - '123e4567-e89b-12d3-a456-426614174000'
            - '0xa65aae78edef916d4102ba7b5672068c0d35fbff'
        amount:
          type: string
          format: number
          example: 100.123456
          description: The amount to be transferred.
    TransferResponse:
      type: object
      properties:
        type:
          type: string
          description: The type of this transaction.
          enum: ['transfer']
        status:
          enum:
            # - awaiting_signature
            - processing
            - success
            - failed
        request:
          description: An object containing the parameters used for this transfer.
          $ref: '#/components/schemas/TransferRequest'
        # state:
        # allOf:
        # - $ref: "#/components/schemas/BaseTransactionState"
        # - $ref: "#/components/schemas/TransferTransactionState"
    ExecuteTransactionRequest:
      type: object
      required:
        - transactionSignatures
      properties:
        transactionSignatures:
          description: All signatures required for this transaction.
          type: array
          items:
            type: string
    StatePayment:
      type: object
      description: The payment details for this transaction.
      properties:
        rail:
          type: string
          enum: ['pix']
          description: The payment rail that will be used for this transaction.
    OnRampStatePayment:
      allOf:
        - $ref: '#/components/schemas/StatePayment'
        - type: object
          properties:
            brCode:
              type: string
              description: The PIX copy-and-paste code to be used for payment.
              example: '00020126580014br.gov.bcb.pix0136123e4567-e89b-12d3-a456-4266141740005204000053039865802BR5915Test Merchant6009Sao Paulo62070503***63041234'
    OnRampSuccessReceipt:
      type: object
      description: The receipt details for this transaction.
      properties:
        rate:
          type: number
          description: The exchange rate used for this transaction.
          example: 0.166
        sourceAmount:
          type: number
          description: The amount that was converted from the source currency.
          example: 6000
        targetAmount:
          type: number
          description: The converted amount after fees.
          example: 986.80
        sourceCurrency:
          type: string
          description: The currency to convert from.
          example: 'BRL'
        targetCurrency:
          type: string
          description: The currency to convert to.
          example: 'USDC'
        fees:
          type: object
          description: The fee details for this transaction.
          properties:
            currency:
              type: string
              description: The currency of the fee.
              example: 'USDC'
              enum: ['BRL', 'USDC', 'USDT']
            lumx:
              type: object
              description: The fees charged by Lumx for processing this transaction.
              properties:
                percentage:
                  type: number
                  description: The percentage fee, calculated as a percentage of the target amount.
                  example: 9.988916
                flat:
                  type: number
                  description: The flat fee which is subtracted from the target amount.
                  example: 1
            developer:
              type: object
              description: The fees charged by the developer (you) for processing this transaction.
              properties:
                percentage:
                  type: number
                  description: The percentage fee, calculated as a percentage of the target amount.
                  example: 0.998891
                flat:
                  type: number
                  description: The flat fee which is subtracted from the target amount.
                  example: 0.1
        blockchain:
          $ref: '#/components/schemas/BlockchainReceipt'
    OffRampSuccessReceipt:
      type: object
      description: The receipt details for this transaction.
      properties:
        rate:
          type: number
          description: The exchange rate used for this transaction.
          example: 6.0066
        sourceAmount:
          type: number
          description: The amount that was converted from the source currency.
          example: 1000.00
        targetAmount:
          type: number
          description: The converted amount after fees.
          example: 5925.55
        sourceCurrency:
          type: string
          description: The currency to convert from.
          example: 'USDC'
        targetCurrency:
          type: string
          description: The currency to convert to.
          example: 'BRL'
        fees:
          type: object
          description: The fee details for this transaction.
          properties:
            currency:
              type: string
              description: The currency of the fee.
              example: 'USDC'
              enum: ['BRL', 'USDC', 'USDT']
            lumx:
              type: object
              description: The fees charged by Lumx for processing this transaction.
              properties:
                percentage:
                  type: number
                  description: The percentage fee, calculated as a percentage of the target amount.
                  example: 10.000000
                flat:
                  type: number
                  description: The flat fee which is subtracted from the target amount.
                  example: 1
            developer:
              type: object
              description: The fees charged by the developer (you) for processing this transaction.
              properties:
                percentage:
                  type: number
                  description: The percentage fee, calculated as a percentage of the target amount.
                  example: 1.000000
                flat:
                  type: number
                  description: The flat fee which is subtracted from the target amount.
                  example: 0.1
        blockchain:
          $ref: '#/components/schemas/BlockchainReceipt'
  securitySchemes:
    apiKey:
      type: http
      scheme: bearer
      description: Bearer authentication header of the form `Bearer <API_KEY>`.
